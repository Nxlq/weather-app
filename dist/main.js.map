{"version":3,"file":"main.js","mappings":"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","sources":["webpack://weather-app/./src/weather-data.js","webpack://weather-app/./src/weather-display-view.js","webpack://weather-app/./src/index.js"],"sourcesContent":["async function fetchCurrentWeather(locationQuery) {\n  const response = await fetch(\n    `https://api.weatherapi.com/v1/forecast.json?key=9075e974d8924af5855180341233103&q=${locationQuery}&days=7&aqi=no`,\n    { mode: \"cors\" }\n  );\n\n  const data = await response.json();\n\n  // add parsed info onto data object\n  data.formattedInfo = getFormattedInfo(data);\n\n  console.log(data);\n  return data;\n}\n\nexport default fetchCurrentWeather;\n\nfunction parseLocalTime(localTimeStr) {\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  const [date, time] = localTimeStr.split(\" \");\n\n  // date split = [year, month, day]\n  const monthIndex = parseInt(date.split(\"-\")[1], 10) - 1;\n  const monthAbbreviation = months[monthIndex].slice(0, 3);\n  const dayOfMonth = parseInt(date.split(\"-\")[2], 10);\n\n  return { monthAbbreviation, dayOfMonth, time };\n}\n\nfunction parseCurrentDayOfWeek(localTimeStr) {\n  const daysOfWeek = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  const dayIndex = new Date(`${localTimeStr}`).getDay();\n  const currentDay = daysOfWeek[dayIndex];\n\n  return currentDay;\n}\n\nfunction parseWeatherIcon(currentConditionObj) {\n  const iconAPILink = currentConditionObj.icon;\n  const weatherIcon = iconAPILink\n    .split(\"/\")\n    .find((str) => str.includes(\".png\"));\n\n  return weatherIcon;\n}\n\n// this function calls all data parsing functions and returns a formatted info obj which is added to the api response obj when fetched\nfunction getFormattedInfo(data) {\n  const { monthAbbreviation, dayOfMonth, time } = parseLocalTime(\n    data.location.localtime\n  );\n  const day = parseCurrentDayOfWeek(data.location.localtime);\n  const weatherIcon = parseWeatherIcon(data.current.condition);\n\n  return { monthAbbreviation, dayOfMonth, time, day, weatherIcon };\n}\n","async function fetchWeatherGif(string) {\n  const response = await fetch(\n    `https://api.giphy.com/v1/gifs/translate?api_key=wbrSw8VyWBlLS4akOVt1qa9fZP9rXC40&s=${string}`,\n    { mode: \"cors\" }\n  );\n  const data = await response.json();\n  const gifURL = data.data.images.original.url;\n  return gifURL;\n}\n\nfunction updateWeatherBG(url) {\n  const weatherDisplayEl = document.getElementById(\"weather-display\");\n  weatherDisplayEl.style.backgroundImage = url;\n}\n\nasync function setWeatherBackgroundImage(data) {\n  console.log({ data });\n  const curWeatherCode = data.current.condition.code;\n  const sunnyCodes = [1000, 1003];\n  const cloudyCodes = [1006, 1009, 1030, 1135, 1147];\n  const rainyCodes = [\n    1063, 1069, 1072, 1150, 1153, 1168, 1171, 1180, 1183, 1186, 1189, 1192,\n    1195, 1198, 1201, 1204, 1207, 1240, 1243, 1246, 1249, 1252,\n  ];\n  const snowyCodes = [\n    1066, 1114, 1117, 1210, 1213, 1216, 1219, 1222, 1225, 1237, 1255, 1258,\n    1261, 1264, 1279, 1282,\n  ];\n  const stormyCodes = [1087, 1273, 1276, 1279, 1282];\n\n  // if it's night time\n  if (!data.current.is_day) {\n    const gifURL = await fetchWeatherGif(\"nighttime\");\n    updateWeatherBG(`url(${gifURL})`);\n    return;\n  }\n\n  // if it's day time\n\n  // IF SUNNY\n  if (sunnyCodes.includes(curWeatherCode)) {\n    const gifURL = await fetchWeatherGif(\"sun\");\n    updateWeatherBG(`url(${gifURL})`);\n\n    return;\n  }\n\n  // IF CLOUDY\n  if (cloudyCodes.includes(curWeatherCode)) {\n    const gifURL = await fetchWeatherGif(\"cloudy\");\n    updateWeatherBG(`url(${gifURL})`);\n    return;\n  }\n\n  // IF RAINY\n  if (rainyCodes.includes(curWeatherCode)) {\n    const gifURL = await fetchWeatherGif(\"rainy\");\n    updateWeatherBG(`url(${gifURL})`);\n    return;\n  }\n\n  // IF SNOWY\n  if (snowyCodes.includes(curWeatherCode)) {\n    const gifURL = await fetchWeatherGif(\"snowy\");\n    updateWeatherBG(`url(${gifURL})`);\n  }\n\n  // IF STORMY\n  if (stormyCodes.includes(curWeatherCode)) {\n    const gifURL = await fetch(\"storm\");\n    updateWeatherBG(`url(${gifURL})`);\n  }\n}\n\nfunction generateWeatherDisplayDom(data) {\n  const weatherDisplayCur = document.getElementById(\"weather-display\");\n  // check if there is a current weather display, remove if so before generating a new one\n  if (weatherDisplayCur) {\n    weatherDisplayCur.remove();\n  }\n  console.log(data);\n  // generate weather display container\n  const weatherDisplay = document.createElement(\"div\");\n  weatherDisplay.id = \"weather-display\";\n\n  // generate icon for weather display\n  const weatherIcon = document.createElement(\"img\");\n  weatherIcon.id = \"weather-display-icon\";\n  weatherIcon.src = `/weather-icons/${data.current.is_day ? \"day\" : \"night\"}/${\n    data.formattedInfo.weatherIcon\n  }`;\n\n  // generate weather/location display\n  const tempAndLocationContainer = document.createElement(\"div\");\n  tempAndLocationContainer.id = \"container-weather-location-info\";\n\n  const temperature = document.createElement(\"span\");\n  temperature.id = \"temperature-display\";\n  temperature.textContent = `${Math.round(data.current.temp_f)}°F`;\n\n  const location = document.createElement(\"span\");\n  location.id = \"location-display\";\n  location.textContent = `${data.location.name}, ${data.location.region}, ${data.location.country}`;\n\n  tempAndLocationContainer.append(weatherIcon, temperature, location);\n\n  // generate time and date info\n  const timeAndDateContainer = document.createElement(\"div\");\n  timeAndDateContainer.id = \"container-date-info\";\n\n  const time = document.createElement(\"span\");\n  time.id = \"time-display\";\n  time.textContent = `${data.formattedInfo.time}`;\n\n  const date = document.createElement(\"span\");\n  date.id = \"date-display\";\n  date.textContent = `${data.formattedInfo.monthAbbreviation} ${data.formattedInfo.dayOfMonth}, ${data.formattedInfo.day}`;\n\n  timeAndDateContainer.append(time, date);\n\n  weatherDisplay.append(tempAndLocationContainer, timeAndDateContainer);\n\n  return weatherDisplay;\n}\n\nfunction generateAndRenderHumidity(data) {\n  const humidityStat = data.current.humidity;\n  const humidityTextContainer = document.getElementById(\"humidity-text\");\n\n  // if element already exists then just change the text content\n  if (humidityTextContainer.childElementCount === 2) {\n    humidityTextContainer.lastChild.textContent = `${humidityStat}%`;\n    return;\n  }\n\n  const span = document.createElement(\"span\");\n  span.textContent = `${humidityStat}%`;\n\n  humidityTextContainer.appendChild(span);\n}\n\nfunction generateAndRenderUvIndex(data) {\n  const uvIndex = data.current.uv;\n  const uvIndexTextContainer = document.getElementById(\"uv-index-text\");\n\n  // if element already exists then just change the text content\n  if (uvIndexTextContainer.childElementCount === 2) {\n    uvIndexTextContainer.lastChild.textContent = `${uvIndex} of 10`;\n    return;\n  }\n\n  const span = document.createElement(\"span\");\n  span.textContent = `${uvIndex} of 10`;\n\n  uvIndexTextContainer.appendChild(span);\n}\n\nfunction generateAndRenderSunrise(data) {\n  const sunriseStat = data.forecast.forecastday[0].astro.sunrise;\n  const sunriseTextContainer = document.getElementById(\"sunrise-text\");\n\n  // if element already exists then just change the text content\n  if (sunriseTextContainer.childElementCount === 2) {\n    sunriseTextContainer.lastChild.textContent = `${sunriseStat}`;\n    return;\n  }\n\n  const span = document.createElement(\"span\");\n  span.textContent = `${sunriseStat}`;\n\n  sunriseTextContainer.appendChild(span);\n}\n\nfunction generateAndRenderSunset(data) {\n  const sunsetStat = data.forecast.forecastday[0].astro.sunset;\n  const sunsetTextContainer = document.getElementById(\"sunset-text\");\n\n  // if element already exists then just change the text content\n  if (sunsetTextContainer.childElementCount === 2) {\n    sunsetTextContainer.lastChild.textContent = `${sunsetStat}`;\n    return;\n  }\n\n  const span = document.createElement(\"span\");\n  span.textContent = `${sunsetStat}`;\n\n  sunsetTextContainer.appendChild(span);\n}\n\nfunction renderMiscWeatherStats(data) {\n  generateAndRenderHumidity(data);\n  generateAndRenderUvIndex(data);\n  generateAndRenderSunrise(data);\n  generateAndRenderSunset(data);\n}\n\nfunction renderWeatherDisplay(data) {\n  const appContent = document.getElementById(\"app-content\");\n  appContent.append(generateWeatherDisplayDom(data));\n}\n\nfunction createTempChart(data) {\n  const chartContainer = document.getElementById(\"chart-container\");\n\n  // if a chart already exists then remove it first\n  if (chartContainer.hasChildNodes) {\n    chartContainer.removeChild(chartContainer.firstElementChild);\n  }\n\n  const ctx = document.createElement(\"canvas\");\n  ctx.id = \"myChart\";\n  chartContainer.appendChild(ctx);\n\n  const maxTempsArr = data.forecast.forecastday.map(\n    (day) => `${day.day.maxtemp_f}`\n  );\n  const minTempsArr = data.forecast.forecastday.map(\n    (day) => `${day.day.mintemp_f}`\n  );\n  const labelsArr = data.forecast.forecastday.map(\n    (day) =>\n      `${data.formattedInfo.monthAbbreviation} ${parseInt(\n        day.date.split(\"-\")[2],\n        10\n      )}`\n  );\n\n  // generate/render chart\n  new Chart(ctx, {\n    type: \"bar\",\n    data: {\n      labels: labelsArr,\n      datasets: [\n        {\n          label: \"Max Temp °F\",\n          data: maxTempsArr,\n          borderWidth: 1,\n        },\n        {\n          label: \"Min Temp °F\",\n          data: minTempsArr,\n          borderWidth: 1,\n        },\n      ],\n    },\n    options: {\n      plugins: {\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    },\n  });\n}\n\nexport default function renderWeatherContents(data) {\n  renderWeatherDisplay(data);\n  renderMiscWeatherStats(data);\n  createTempChart(data);\n  setWeatherBackgroundImage(data);\n}\n","import fetchCurrentWeather from \"./weather-data\";\nimport renderWeatherContents from \"./weather-display-view\";\n\nconst searchBar = document.getElementById(\"search-location-input\");\n\nasync function locationReqSuccess(position) {\n  const { latitude, longitude } = position.coords;\n  const data = await fetchCurrentWeather(`${latitude},${longitude}`);\n\n  renderWeatherContents(data);\n  return data;\n  // return `${latitude},${longitude}`;\n}\n\nfunction locationReqFailed() {\n  alert(\"Unable to retrieve position :( Try searching for a location!\");\n}\n\nwindow.addEventListener(\"DOMContentLoaded\", async () => {\n  navigator.geolocation.getCurrentPosition(\n    locationReqSuccess,\n    locationReqFailed\n  );\n});\n\nsearchBar.addEventListener(\"keyup\", async (e) => {\n  if (e.code.toLowerCase() === \"enter\") {\n    const data = await fetchCurrentWeather(searchBar.value);\n    console.log(data);\n    renderWeatherContents(data);\n  }\n});\n"],"names":["async","locationQuery","response","fetch","mode","data","json","formattedInfo","monthAbbreviation","dayOfMonth","time","localTimeStr","date","split","parseInt","slice","parseLocalTime","location","localtime","day","Date","getDay","weatherIcon","current","condition","icon","find","str","includes","getFormattedInfo","console","log","fetchWeatherGif","string","images","original","url","updateWeatherBG","document","getElementById","style","backgroundImage","renderWeatherContents","append","weatherDisplayCur","remove","weatherDisplay","createElement","id","src","is_day","tempAndLocationContainer","temperature","textContent","Math","round","temp_f","name","region","country","timeAndDateContainer","generateWeatherDisplayDom","renderWeatherDisplay","humidityStat","humidity","humidityTextContainer","childElementCount","lastChild","span","appendChild","generateAndRenderHumidity","uvIndex","uv","uvIndexTextContainer","generateAndRenderUvIndex","sunriseStat","forecast","forecastday","astro","sunrise","sunriseTextContainer","generateAndRenderSunrise","sunsetStat","sunset","sunsetTextContainer","generateAndRenderSunset","renderMiscWeatherStats","chartContainer","hasChildNodes","removeChild","firstElementChild","ctx","maxTempsArr","map","maxtemp_f","minTempsArr","mintemp_f","labelsArr","Chart","type","labels","datasets","label","borderWidth","options","plugins","scales","y","beginAtZero","createTempChart","curWeatherCode","code","setWeatherBackgroundImage","searchBar","locationReqSuccess","position","latitude","longitude","coords","locationReqFailed","alert","window","addEventListener","navigator","geolocation","getCurrentPosition","e","toLowerCase","value"],"sourceRoot":""}